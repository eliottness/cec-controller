name: Build, Test and Release

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (builds and packages but does not publish release)'
        required: true
        type: boolean
        default: true

jobs:
  test:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install libcec for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y libcec-dev libp8-platform-dev

      - name: Run tests
        run: go test -v ./...

  build-ubuntu:
    name: Build Ubuntu Binaries
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcec-dev libp8-platform-dev gcc-aarch64-linux-gnu
          # Add arm64 architecture and install cross-compilation libraries
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libcec-dev:arm64 libp8-platform-dev:arm64

      - name: Build Ubuntu amd64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          mkdir -p dist/ubuntu-amd64_linux_amd64_v1
          go build -ldflags="-s -w" -o dist/ubuntu-amd64_linux_amd64_v1/cec-controller .

      - name: Build Ubuntu arm64
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
        run: |
          mkdir -p dist/ubuntu-arm64_linux_arm64
          go build -ldflags="-s -w" -o dist/ubuntu-arm64_linux_arm64/cec-controller .

      - name: Upload Ubuntu binaries
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-binaries
          path: dist/

  build-fedora:
    name: Build Fedora Binaries
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU for cross-compilation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Fedora amd64 in Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            fedora:latest bash -c "
              dnf install -y golang libcec-devel gcc make git && \
              mkdir -p dist/fedora-amd64_linux_amd64_v1 && \
              CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -buildvcs=false -ldflags='-s -w' -o dist/fedora-amd64_linux_amd64_v1/cec-controller .
            "

      - name: Build Fedora arm64 with cross-compilation in Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
            fedora:latest bash -c "
              dnf install -y golang libcec-devel gcc-aarch64-linux-gnu make git && \
              mkdir -p dist/fedora-arm64_linux_arm64 && \
              CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -buildvcs=false -ldflags='-s -w' -o dist/fedora-arm64_linux_arm64/cec-controller .
            "

      - name: Upload Fedora binaries
        uses: actions/upload-artifact@v4
        with:
          name: fedora-binaries
          path: dist/

  release:
    name: Create Release with GoReleaser
    needs: [build-ubuntu, build-fedora]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Download Ubuntu binaries
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-binaries
          path: dist-temp-ubuntu/

      - name: Download Fedora binaries
        uses: actions/download-artifact@v4
        with:
          name: fedora-binaries
          path: dist-temp-fedora/

      - name: Merge artifacts into dist directory
        run: |
          mkdir -p dist
          cp -r dist-temp-ubuntu/* dist/
          cp -r dist-temp-fedora/* dist/

      - name: List dist contents
        run: |
          echo "Contents of dist directory:"
          find dist -type f -ls

      - name: Run GoReleaser (Dry Run)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --snapshot --skip=build,validate --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (Release)
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --skip=build,validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dry-run artifacts
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: actions/upload-artifact@v4
        with:
          name: dry-run-packages
          path: |
            dist/*.deb
            dist/*.rpm